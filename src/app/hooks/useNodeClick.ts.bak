import { useCallback } from "react";
import {
  NodeProps,
  useReactFlow,
  getOutgoers,
  ReactFlowInstance,
} from "reactflow";
import { Configuration, OpenAIApi } from "openai";

import { uuid } from "../utils";

// this hook implements the logic for clicking a workflow node
// on workflow node click: create a new child node of the clicked node
export function useNodeClick(id: NodeProps["id"]) {
  const {
    setEdges,
    setNodes,
    getNodes,
    getEdges,
    getNode,
  } = useReactFlow();

  const configuration = new Configuration({
    apiKey: process.env.REACT_APP_OPEN_AI_KEY,
  });

  const openai = new OpenAIApi(configuration);

  const askGPT = async (prompt: string) => {
    console.log("asking GPT...");

    const response = await openai.createCompletion({
      model: "text-davinci-003",
      prompt: prompt, // + 'and return the response with a new line in between each sentence.',
      max_tokens: 128,
      temperature: 0.7,
      top_p: 1,
      n: 1,
      stream: false,
      logprobs: null,
      stop: "",
    });

    // const text = response.data.choices[0].text.trim();
    const text = response.data.choices[0].text;

    if (typeof text === "string") {
      let re = /\d.*\n*/g; // regex pattern

      let subtopics: any;
      subtopics = text.match(re); // put all subtopics into array

      if (Array.isArray(subtopics)) {
        // remove unnecessary characters
        subtopics.forEach(
          (elem, idx) => (subtopics[idx] = elem.replace(/\d. /, ""))
        );
        subtopics.forEach(
          (elem, idx) => (subtopics[idx] = elem.replace(/ ?\n/, ""))
        );
        return subtopics;
      }
    }
    return;
  };

  const onClick = async () => {
    // we need the parent node object for positioning the new child node

    console.log("id", id);
    const parentNode = getNode(id);
    console.log("parentNode", parentNode);

    let sourceHandleId = "b";
    let targetHandleId = "a";
    let newNodePosition = {
      x: parentNode!.position.x,
      y: parentNode!.position.y + 150,
    };
    let nodeType = "subtopic";

    if (!parentNode) {
      return;
    }

    // create a unique id for the child node
    const childNodeId = uuid();

    const parentNodeLabel = parentNode.data["label"];

    console.log("parentNodeLabel", parentNodeLabel);
    console.log("id", id);

    // const prompt = 'Give me six sub-topics for ' + '' + parentNodeLabel;

    // console.log('prompt:', prompt);

    let subtopics = [
      "Human Resources Management",
      "Financial Management",
      "Project Management",
      "Strategic Planning",
      "Risk Management",
      "Quality Management",
    ];
    // subtopics = await askGPT(prompt);

    console.log("subtopics:", subtopics);

    // create the child node
    const childNode = {
      id: childNodeId,
      // we try to place the child node close to the calculated position from the layout algorithm
      // 150 pixels below the parent node, this spacing can be adjusted in the useLayout hook
      position: newNodePosition!,
      type: nodeType,
      // data: { label: randomLabel() },
      data: { label: subtopics[Math.floor(Math.random() * 10 % 5)] },
    };

    // we need to create a connection from parent to child
    const childEdge = {
      id: `${parentNode.id}=>${childNodeId}`,
      source: parentNode.id,
      target: childNodeId,
      sourceHandle: sourceHandleId,
      targetHandle: targetHandleId,
      type: 'placeholder',
    };

    // if the clicked node has had any placeholders as children, we remove them because it will get a child now
    const existingPlaceholders = getOutgoers(parentNode, getNodes(), getEdges())
      .filter((node) => node.type === "placeholder")
      .map((node) => node.id);

    // add the new nodes (child and placeholder), filter out the existing placeholder nodes of the clicked node
    setNodes((nodes) =>
      nodes
        .filter((node) => !existingPlaceholders.includes(node.id))
        .concat([childNode])
    );

    // add the new edges (node -> child, child -> placeholder), filter out any placeholder edges
    setEdges((edges) =>
      edges
        .filter((edge) => !existingPlaceholders.includes(edge.target))
        .concat([childEdge])
    );
  };

  return onClick;
}

export default useNodeClick;
